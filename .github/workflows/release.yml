name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_release_x64:
    name: Build Release
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            release_suffix: mac-amd64
          - os: ubuntu-latest
            release_suffix: linux-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Mac Build x64
        if: matrix.os == 'macos-latest'
        run: |
          brew install crystal libssh2
          shards install --without-development
          crystal build src/hetzner-k3s.cr --release
          chmod +x hetzner-k3s
          cp hetzner-k3s hetzner-k3s-${{ matrix.release_suffix }}
          gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.NAME }}" || true
          gh release upload ${{ env.VERSION }} ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          MESSAGE: "WIP"
          NAME: ${{ github.ref_name }}
          FILES: hetzner-k3s-${{ matrix.release_suffix }}

      - name: Run Linux Build
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run -d --name alpine -v $(pwd):/workspace -w /workspace crystallang/crystal:latest-alpine tail -f /dev/null
          docker exec alpine apk add libssh2 libssh2-dev libssh2-static libxml2-dev libxml2-static xz-static
          docker exec alpine shards install --without-development
          docker exec alpine crystal build src/hetzner-k3s.cr --release --static
          cp hetzner-k3s hetzner-k3s-${{ matrix.release_suffix }}
          gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.NAME }}" || true
          gh release upload ${{ env.VERSION }} ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          MESSAGE: "WIP"
          NAME: ${{ github.ref_name }}
          FILES: hetzner-k3s-${{ matrix.release_suffix }}

  build_release_arm:
    name: Build Release
    strategy:
      matrix:
        os: [ARM64]
        include:
          - os: ARM64
            release_suffix: mac-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Mac Build ARM
        if: matrix.os == 'ARM64'
        run: |
          brew install crystal libssh2
          shards install --without-development
          crystal build src/hetzner-k3s.cr --release
          chmod +x hetzner-k3s
          cp hetzner-k3s hetzner-k3s-${{ matrix.release_suffix }}
          gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.NAME }}" || true
          gh release upload ${{ env.VERSION }} ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          MESSAGE: "WIP"
          NAME: ${{ github.ref_name }}
          FILES: hetzner-k3s-${{ matrix.release_suffix }}
          
  build_release_linux_arm:
    runs-on: ubuntu-22.04
    name: Build arm64 on alpine aarch64
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ github.ref_name }}
      MESSAGE: "WIP"
      FILES: hetzner-k3s-linux-arm64
      
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Build arm64 binary
        id: runcmd
        with:
          arch: aarch64
          distro: alpine_latest
          
          run: |
            apk add --update --no-cache gcc gmp-dev libevent-static musl-dev pcre-dev pcre2-dev libxml2-dev \
              libxml2-static openssl-dev openssl-libs-static tzdata yaml-static zlib-static xz-static \
              make git autoconf automake libtool patch
            apk add --update --no-cache libssh2-static libssh2-dev crystal shards github-cli
            shards install --without-development
            shards build --without-development --release --static
            cp ./bin/hetzner-k3s ${{ env.FILES }}
            git config --global --add safe.directory /home/runner/work/hetzner-k3s/hetzner-k3s
            
      - name: Publish new version
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ env.GITHUB_TOKEN }}
          file: ${{ env.FILES }}
          tag: ${{ env.VERSION }}
          overwrite: false
          body: ${{ env.MESSAGE }}
